//
//  main.cpp
//  chapter16
//
//  Created by vividhsu on 7/30/15.
//  Copyright (c) 2015 Vividhsu. All rights reserved.
//

#include <iostream>
#include <vector>
#include <list>

#include "Sales_data.h"

using std::cout;
using std::endl;
using std::vector;
using std::list;

void ex16_01() {
    cout << "-----ex16.1-----" << endl;
    cout << "instantiation: class or function generated by the compiler from a template." << endl;
}

template <typename T>
int compare(const T& v1, const T& v2) {
    if (v1 < v2)
        return -1;
    if (v2 < v1)
        return 1;
    return 0;
}

void ex16_02() {
    cout << "-----ex16.2-----" << endl;
    cout << compare(3, 4) << endl;
    vector<int> v1{1, 2, 3};
    vector<int> v2{2, 3, 4};
    cout << compare(v1, v2);
}

void ex16_03() {
    cout << "-----ex16.3-----" << endl;
    Sales_data data1;
    Sales_data data2;
    //cout << compare(data1, data2);
    cout << "Invalid operands to binary expression (const Sales_data and const Sales_data) in line if (v1 < v2)" << endl;
}

template <typename Iterator, typename T>
Iterator myFind(Iterator first, Iterator last, const T& target) {
    while (first != last) {
        if (*first == target) {
            return first;
        }
        ++first;
    }
    return last;
}

void ex16_04() {
    cout << "-----ex16.4-----" << endl;
    vector<int> a{1, 2, 3, 4};
    auto it = myFind(a.begin(), a.end(), 3);
    cout << (it == a.end()) << endl;
    list<string> b{"a", "b", "c", "d"};
    auto it2 = myFind(b.begin(), b.end(), "e");
    cout << (it2 == b.end()) << endl;
}

template <typename T, unsigned N>
void myPrint(const T (&arr)[N]) {
    for (size_t i = 0; i != N; ++i) {
        cout << arr[i] << endl;
    }
}

void ex16_05() {
    cout << "-----ex16.5-----" << endl;
    string s[] = {"aa", "bb", "cc"};
    char c[] = {'a', 'b', 'c', 'd'};
    int  i[] = {1, 2, 3};
    myPrint(s);
    myPrint(c);
    myPrint(i);
}

template <typename T, size_t N>
T* myBegin(T (&arr)[N]) {
    T* iter = &arr[0];
    return iter;
}

template <typename T, size_t N>
T* myEnd(T (&arr)[N]) {
    T* iter = &arr[N - 1];
    iter++;
    return iter;
}


void ex16_06() {
    cout << "-----ex16.6-----" << endl;
    string s[] = {"aa", "bb", "cc" };
    char c[] = {'a', 'b', 'c', 'd'};
    int  i[] = {1, 2, 3};
    cout << *myBegin(s) << *(myEnd(s) - 1) << endl;
    cout << *myBegin(c) << *(myEnd(c) - 1) << endl;
    cout << *myBegin(i) << *(myEnd(i) - 1) << endl;
}

template <typename T, size_t N>
constexpr size_t mySize(const T (&arr)[N]) {
    return N;
}

void ex16_07() {
    cout << "-----ex16.7-----" << endl;
    string s[] = {"aa", "bb", "cc" };
    char c[] = {'a', 'b', 'c', 'd'};
    int  i[] = {1, 2, 3};
    cout << mySize(s) << endl;
    cout << mySize(c) << endl;
    cout << mySize(i) << endl;
}

void ex16_08() {
    cout << "-----ex16.8-----" << endl;
    cout << "all the container defines !=, easy to implement the template" << endl;
}

int main(int argc, const char * argv[]) {
//    ex16_01();
//    ex16_02();
//    ex16_03();
//    ex16_04();
//    ex16_05();
//    ex16_06();
//    ex16_07();
//    ex16_08();
    return 0;
}
